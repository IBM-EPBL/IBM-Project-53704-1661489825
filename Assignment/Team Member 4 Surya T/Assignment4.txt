{
  "metadata": {
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    }
  },
  "nbformat_minor": 5,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "code",
      "source": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt",
      "metadata": {},
      "execution_count": 9,
      "outputs": [],
      "id": "6c07191b"
    },
    {
      "cell_type": "markdown",
      "source": "# Load the dataset\n",
      "metadata": {},
      "id": "b170d64a"
    },
    {
      "cell_type": "code",
      "source": "import pandas as pd\ndf=pd.read_csv('Mall_Customers.csv')\ndf.head()",
      "metadata": {},
      "execution_count": 12,
      "outputs": [
        {
          "execution_count": 12,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Male</td>\n",
              "      <td>19</td>\n",
              "      <td>15</td>\n",
              "      <td>39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Male</td>\n",
              "      <td>21</td>\n",
              "      <td>15</td>\n",
              "      <td>81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Female</td>\n",
              "      <td>20</td>\n",
              "      <td>16</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Female</td>\n",
              "      <td>23</td>\n",
              "      <td>16</td>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Female</td>\n",
              "      <td>31</td>\n",
              "      <td>17</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   CustomerID  Gender  Age  Annual Income (k$)  Spending Score (1-100)\n",
              "0           1    Male   19                  15                      39\n",
              "1           2    Male   21                  15                      81\n",
              "2           3  Female   20                  16                       6\n",
              "3           4  Female   23                  16                      77\n",
              "4           5  Female   31                  17                      40"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "d5b8f6fb"
    },
    {
      "cell_type": "code",
      "source": "df.shape\n",
      "metadata": {},
      "execution_count": 13,
      "outputs": [
        {
          "execution_count": 13,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(200, 5)"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "9f600f68"
    },
    {
      "cell_type": "code",
      "source": "df.info()",
      "metadata": {},
      "execution_count": 14,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "<class 'pandas.core.frame.DataFrame'>\n\nRangeIndex: 200 entries, 0 to 199\n\nData columns (total 5 columns):\n\n #   Column                  Non-Null Count  Dtype \n\n---  ------                  --------------  ----- \n\n 0   CustomerID              200 non-null    int64 \n\n 1   Gender                  200 non-null    object\n\n 2   Age                     200 non-null    int64 \n\n 3   Annual Income (k$)      200 non-null    int64 \n\n 4   Spending Score (1-100)  200 non-null    int64 \n\ndtypes: int64(4), object(1)\n\nmemory usage: 7.9+ KB\n"
        }
      ],
      "id": "c79501c2"
    },
    {
      "cell_type": "markdown",
      "source": "# Perform below Visualizations",
      "metadata": {},
      "id": "0083f4cd"
    },
    {
      "cell_type": "markdown",
      "source": "## -Univariate Analysis",
      "metadata": {},
      "id": "aa17b6b9"
    },
    {
      "cell_type": "code",
      "source": "plt.scatter(df.index,df['Age'])\nplt.show()",
      "metadata": {},
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "id": "1650b14c"
    },
    {
      "cell_type": "markdown",
      "source": "## -Bivariate Analysis",
      "metadata": {},
      "id": "cd9fdbd7"
    },
    {
      "cell_type": "code",
      "source": "df.Age.plot()\nplt.legend(['Exited','Age'])",
      "metadata": {},
      "execution_count": 21,
      "outputs": [
        {
          "execution_count": 21,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x2c00a113670>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "id": "8c552529"
    },
    {
      "cell_type": "markdown",
      "source": "## -Multivariate Analysis",
      "metadata": {},
      "id": "c10519f8"
    },
    {
      "cell_type": "code",
      "source": "df.plot()",
      "metadata": {},
      "execution_count": 22,
      "outputs": [
        {
          "execution_count": 22,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<AxesSubplot:>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "id": "005acf6e"
    },
    {
      "cell_type": "markdown",
      "source": "# Perform descriptive statistics on the dataset",
      "metadata": {},
      "id": "659b97ea"
    },
    {
      "cell_type": "code",
      "source": "df=pd.read_csv('Mall_Customers.csv')\ndf.sum()",
      "metadata": {},
      "execution_count": 24,
      "outputs": [
        {
          "execution_count": 24,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "CustomerID                                                            20100\n",
              "Gender                    MaleMaleFemaleFemaleFemaleFemaleFemaleFemaleMa...\n",
              "Age                                                                    7770\n",
              "Annual Income (k$)                                                    12112\n",
              "Spending Score (1-100)                                                10040\n",
              "dtype: object"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "f0b64e77"
    },
    {
      "cell_type": "code",
      "source": "df.sum(1)",
      "metadata": {},
      "execution_count": 25,
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": "C:\\Users\\ELCOT\\AppData\\Local\\Temp\\ipykernel_9224\\681064937.py:1: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n\n  df.sum(1)\n"
        },
        {
          "execution_count": 25,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       74\n",
              "1      119\n",
              "2       45\n",
              "3      120\n",
              "4       93\n",
              "      ... \n",
              "195    430\n",
              "196    396\n",
              "197    430\n",
              "198    386\n",
              "199    450\n",
              "Length: 200, dtype: int64"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "54d3fe8c"
    },
    {
      "cell_type": "code",
      "source": "df.mean()",
      "metadata": {},
      "execution_count": 26,
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": "C:\\Users\\ELCOT\\AppData\\Local\\Temp\\ipykernel_9224\\3698961737.py:1: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n\n  df.mean()\n"
        },
        {
          "execution_count": 26,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "CustomerID                100.50\n",
              "Age                        38.85\n",
              "Annual Income (k$)         60.56\n",
              "Spending Score (1-100)     50.20\n",
              "dtype: float64"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "132f03f3"
    },
    {
      "cell_type": "code",
      "source": "df.describe()",
      "metadata": {},
      "execution_count": 27,
      "outputs": [
        {
          "execution_count": 27,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>200.000000</td>\n",
              "      <td>200.000000</td>\n",
              "      <td>200.000000</td>\n",
              "      <td>200.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>100.500000</td>\n",
              "      <td>38.850000</td>\n",
              "      <td>60.560000</td>\n",
              "      <td>50.200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>57.879185</td>\n",
              "      <td>13.969007</td>\n",
              "      <td>26.264721</td>\n",
              "      <td>25.823522</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>15.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>50.750000</td>\n",
              "      <td>28.750000</td>\n",
              "      <td>41.500000</td>\n",
              "      <td>34.750000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>100.500000</td>\n",
              "      <td>36.000000</td>\n",
              "      <td>61.500000</td>\n",
              "      <td>50.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>150.250000</td>\n",
              "      <td>49.000000</td>\n",
              "      <td>78.000000</td>\n",
              "      <td>73.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>200.000000</td>\n",
              "      <td>70.000000</td>\n",
              "      <td>137.000000</td>\n",
              "      <td>99.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       CustomerID         Age  Annual Income (k$)  Spending Score (1-100)\n",
              "count  200.000000  200.000000          200.000000              200.000000\n",
              "mean   100.500000   38.850000           60.560000               50.200000\n",
              "std     57.879185   13.969007           26.264721               25.823522\n",
              "min      1.000000   18.000000           15.000000                1.000000\n",
              "25%     50.750000   28.750000           41.500000               34.750000\n",
              "50%    100.500000   36.000000           61.500000               50.000000\n",
              "75%    150.250000   49.000000           78.000000               73.000000\n",
              "max    200.000000   70.000000          137.000000               99.000000"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "48784988"
    },
    {
      "cell_type": "code",
      "source": "df.prod()",
      "metadata": {},
      "execution_count": 28,
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": "C:\\Users\\ELCOT\\AppData\\Local\\Temp\\ipykernel_9224\\2122031258.py:1: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n\n  df.prod()\n"
        },
        {
          "execution_count": 28,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "CustomerID                0\n",
              "Age                       0\n",
              "Annual Income (k$)        0\n",
              "Spending Score (1-100)    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "a27725dd"
    },
    {
      "cell_type": "code",
      "source": "df.describe(include=['object'])",
      "metadata": {},
      "execution_count": 29,
      "outputs": [
        {
          "execution_count": 29,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Gender</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>112</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        Gender\n",
              "count      200\n",
              "unique       2\n",
              "top     Female\n",
              "freq       112"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "1f5255cf"
    },
    {
      "cell_type": "code",
      "source": "df. describe(include='all')",
      "metadata": {},
      "execution_count": 30,
      "outputs": [
        {
          "execution_count": 30,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>200.000000</td>\n",
              "      <td>200</td>\n",
              "      <td>200.000000</td>\n",
              "      <td>200.000000</td>\n",
              "      <td>200.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Female</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>NaN</td>\n",
              "      <td>112</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>100.500000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>38.850000</td>\n",
              "      <td>60.560000</td>\n",
              "      <td>50.200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>57.879185</td>\n",
              "      <td>NaN</td>\n",
              "      <td>13.969007</td>\n",
              "      <td>26.264721</td>\n",
              "      <td>25.823522</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>15.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>50.750000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>28.750000</td>\n",
              "      <td>41.500000</td>\n",
              "      <td>34.750000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>100.500000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>36.000000</td>\n",
              "      <td>61.500000</td>\n",
              "      <td>50.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>150.250000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>49.000000</td>\n",
              "      <td>78.000000</td>\n",
              "      <td>73.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>200.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>70.000000</td>\n",
              "      <td>137.000000</td>\n",
              "      <td>99.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        CustomerID  Gender         Age  Annual Income (k$)  \\\n",
              "count   200.000000     200  200.000000          200.000000   \n",
              "unique         NaN       2         NaN                 NaN   \n",
              "top            NaN  Female         NaN                 NaN   \n",
              "freq           NaN     112         NaN                 NaN   \n",
              "mean    100.500000     NaN   38.850000           60.560000   \n",
              "std      57.879185     NaN   13.969007           26.264721   \n",
              "min       1.000000     NaN   18.000000           15.000000   \n",
              "25%      50.750000     NaN   28.750000           41.500000   \n",
              "50%     100.500000     NaN   36.000000           61.500000   \n",
              "75%     150.250000     NaN   49.000000           78.000000   \n",
              "max     200.000000     NaN   70.000000          137.000000   \n",
              "\n",
              "        Spending Score (1-100)  \n",
              "count               200.000000  \n",
              "unique                     NaN  \n",
              "top                        NaN  \n",
              "freq                       NaN  \n",
              "mean                 50.200000  \n",
              "std                  25.823522  \n",
              "min                   1.000000  \n",
              "25%                  34.750000  \n",
              "50%                  50.000000  \n",
              "75%                  73.000000  \n",
              "max                  99.000000  "
            ]
          },
          "metadata": {}
        }
      ],
      "id": "56665325"
    },
    {
      "cell_type": "markdown",
      "source": "# Handle the Missing values",
      "metadata": {},
      "id": "d2e9563f"
    },
    {
      "cell_type": "code",
      "source": "df.isnull()",
      "metadata": {},
      "execution_count": 31,
      "outputs": [
        {
          "execution_count": 31,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>195</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>196</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>197</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>198</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>199</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>200 rows × 5 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     CustomerID  Gender    Age  Annual Income (k$)  Spending Score (1-100)\n",
              "0         False   False  False               False                   False\n",
              "1         False   False  False               False                   False\n",
              "2         False   False  False               False                   False\n",
              "3         False   False  False               False                   False\n",
              "4         False   False  False               False                   False\n",
              "..          ...     ...    ...                 ...                     ...\n",
              "195       False   False  False               False                   False\n",
              "196       False   False  False               False                   False\n",
              "197       False   False  False               False                   False\n",
              "198       False   False  False               False                   False\n",
              "199       False   False  False               False                   False\n",
              "\n",
              "[200 rows x 5 columns]"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "b1850bff"
    },
    {
      "cell_type": "code",
      "source": "df.notnull()",
      "metadata": {},
      "execution_count": 32,
      "outputs": [
        {
          "execution_count": 32,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>195</th>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>196</th>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>197</th>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>198</th>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>199</th>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>200 rows × 5 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     CustomerID  Gender   Age  Annual Income (k$)  Spending Score (1-100)\n",
              "0          True    True  True                True                    True\n",
              "1          True    True  True                True                    True\n",
              "2          True    True  True                True                    True\n",
              "3          True    True  True                True                    True\n",
              "4          True    True  True                True                    True\n",
              "..          ...     ...   ...                 ...                     ...\n",
              "195        True    True  True                True                    True\n",
              "196        True    True  True                True                    True\n",
              "197        True    True  True                True                    True\n",
              "198        True    True  True                True                    True\n",
              "199        True    True  True                True                    True\n",
              "\n",
              "[200 rows x 5 columns]"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "d223e40c"
    },
    {
      "cell_type": "code",
      "source": "df=pd.read_csv('Mall_Customers.csv')\nbool_series = pd.isnull(df[\"Age\"])\ndf[bool_series]",
      "metadata": {},
      "execution_count": 33,
      "outputs": [
        {
          "execution_count": 33,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [CustomerID, Gender, Age, Annual Income (k$), Spending Score (1-100)]\n",
              "Index: []"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "3daa1fba"
    },
    {
      "cell_type": "code",
      "source": "df.fillna(0)",
      "metadata": {},
      "execution_count": 34,
      "outputs": [
        {
          "execution_count": 34,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Male</td>\n",
              "      <td>19</td>\n",
              "      <td>15</td>\n",
              "      <td>39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Male</td>\n",
              "      <td>21</td>\n",
              "      <td>15</td>\n",
              "      <td>81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Female</td>\n",
              "      <td>20</td>\n",
              "      <td>16</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Female</td>\n",
              "      <td>23</td>\n",
              "      <td>16</td>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Female</td>\n",
              "      <td>31</td>\n",
              "      <td>17</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>195</th>\n",
              "      <td>196</td>\n",
              "      <td>Female</td>\n",
              "      <td>35</td>\n",
              "      <td>120</td>\n",
              "      <td>79</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>196</th>\n",
              "      <td>197</td>\n",
              "      <td>Female</td>\n",
              "      <td>45</td>\n",
              "      <td>126</td>\n",
              "      <td>28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>197</th>\n",
              "      <td>198</td>\n",
              "      <td>Male</td>\n",
              "      <td>32</td>\n",
              "      <td>126</td>\n",
              "      <td>74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>198</th>\n",
              "      <td>199</td>\n",
              "      <td>Male</td>\n",
              "      <td>32</td>\n",
              "      <td>137</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>199</th>\n",
              "      <td>200</td>\n",
              "      <td>Male</td>\n",
              "      <td>30</td>\n",
              "      <td>137</td>\n",
              "      <td>83</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>200 rows × 5 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     CustomerID  Gender  Age  Annual Income (k$)  Spending Score (1-100)\n",
              "0             1    Male   19                  15                      39\n",
              "1             2    Male   21                  15                      81\n",
              "2             3  Female   20                  16                       6\n",
              "3             4  Female   23                  16                      77\n",
              "4             5  Female   31                  17                      40\n",
              "..          ...     ...  ...                 ...                     ...\n",
              "195         196  Female   35                 120                      79\n",
              "196         197  Female   45                 126                      28\n",
              "197         198    Male   32                 126                      74\n",
              "198         199    Male   32                 137                      18\n",
              "199         200    Male   30                 137                      83\n",
              "\n",
              "[200 rows x 5 columns]"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "17af3e21"
    },
    {
      "cell_type": "code",
      "source": "df.fillna(method ='pad')",
      "metadata": {},
      "execution_count": 35,
      "outputs": [
        {
          "execution_count": 35,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Male</td>\n",
              "      <td>19</td>\n",
              "      <td>15</td>\n",
              "      <td>39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Male</td>\n",
              "      <td>21</td>\n",
              "      <td>15</td>\n",
              "      <td>81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Female</td>\n",
              "      <td>20</td>\n",
              "      <td>16</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Female</td>\n",
              "      <td>23</td>\n",
              "      <td>16</td>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Female</td>\n",
              "      <td>31</td>\n",
              "      <td>17</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>195</th>\n",
              "      <td>196</td>\n",
              "      <td>Female</td>\n",
              "      <td>35</td>\n",
              "      <td>120</td>\n",
              "      <td>79</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>196</th>\n",
              "      <td>197</td>\n",
              "      <td>Female</td>\n",
              "      <td>45</td>\n",
              "      <td>126</td>\n",
              "      <td>28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>197</th>\n",
              "      <td>198</td>\n",
              "      <td>Male</td>\n",
              "      <td>32</td>\n",
              "      <td>126</td>\n",
              "      <td>74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>198</th>\n",
              "      <td>199</td>\n",
              "      <td>Male</td>\n",
              "      <td>32</td>\n",
              "      <td>137</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>199</th>\n",
              "      <td>200</td>\n",
              "      <td>Male</td>\n",
              "      <td>30</td>\n",
              "      <td>137</td>\n",
              "      <td>83</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>200 rows × 5 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     CustomerID  Gender  Age  Annual Income (k$)  Spending Score (1-100)\n",
              "0             1    Male   19                  15                      39\n",
              "1             2    Male   21                  15                      81\n",
              "2             3  Female   20                  16                       6\n",
              "3             4  Female   23                  16                      77\n",
              "4             5  Female   31                  17                      40\n",
              "..          ...     ...  ...                 ...                     ...\n",
              "195         196  Female   35                 120                      79\n",
              "196         197  Female   45                 126                      28\n",
              "197         198    Male   32                 126                      74\n",
              "198         199    Male   32                 137                      18\n",
              "199         200    Male   30                 137                      83\n",
              "\n",
              "[200 rows x 5 columns]"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "ee8fa048"
    },
    {
      "cell_type": "code",
      "source": "df[10:25]",
      "metadata": {},
      "execution_count": 36,
      "outputs": [
        {
          "execution_count": 36,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>11</td>\n",
              "      <td>Male</td>\n",
              "      <td>67</td>\n",
              "      <td>19</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>12</td>\n",
              "      <td>Female</td>\n",
              "      <td>35</td>\n",
              "      <td>19</td>\n",
              "      <td>99</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>13</td>\n",
              "      <td>Female</td>\n",
              "      <td>58</td>\n",
              "      <td>20</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>14</td>\n",
              "      <td>Female</td>\n",
              "      <td>24</td>\n",
              "      <td>20</td>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>15</td>\n",
              "      <td>Male</td>\n",
              "      <td>37</td>\n",
              "      <td>20</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>16</td>\n",
              "      <td>Male</td>\n",
              "      <td>22</td>\n",
              "      <td>20</td>\n",
              "      <td>79</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>17</td>\n",
              "      <td>Female</td>\n",
              "      <td>35</td>\n",
              "      <td>21</td>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>18</td>\n",
              "      <td>Male</td>\n",
              "      <td>20</td>\n",
              "      <td>21</td>\n",
              "      <td>66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>19</td>\n",
              "      <td>Male</td>\n",
              "      <td>52</td>\n",
              "      <td>23</td>\n",
              "      <td>29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>20</td>\n",
              "      <td>Female</td>\n",
              "      <td>35</td>\n",
              "      <td>23</td>\n",
              "      <td>98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>21</td>\n",
              "      <td>Male</td>\n",
              "      <td>35</td>\n",
              "      <td>24</td>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>22</td>\n",
              "      <td>Male</td>\n",
              "      <td>25</td>\n",
              "      <td>24</td>\n",
              "      <td>73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>23</td>\n",
              "      <td>Female</td>\n",
              "      <td>46</td>\n",
              "      <td>25</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>24</td>\n",
              "      <td>Male</td>\n",
              "      <td>31</td>\n",
              "      <td>25</td>\n",
              "      <td>73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>25</td>\n",
              "      <td>Female</td>\n",
              "      <td>54</td>\n",
              "      <td>28</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    CustomerID  Gender  Age  Annual Income (k$)  Spending Score (1-100)\n",
              "10          11    Male   67                  19                      14\n",
              "11          12  Female   35                  19                      99\n",
              "12          13  Female   58                  20                      15\n",
              "13          14  Female   24                  20                      77\n",
              "14          15    Male   37                  20                      13\n",
              "15          16    Male   22                  20                      79\n",
              "16          17  Female   35                  21                      35\n",
              "17          18    Male   20                  21                      66\n",
              "18          19    Male   52                  23                      29\n",
              "19          20  Female   35                  23                      98\n",
              "20          21    Male   35                  24                      35\n",
              "21          22    Male   25                  24                      73\n",
              "22          23  Female   46                  25                       5\n",
              "23          24    Male   31                  25                      73\n",
              "24          25  Female   54                  28                      14"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "1e33df14"
    },
    {
      "cell_type": "markdown",
      "source": "# Find the outliers and replace the outliers",
      "metadata": {},
      "id": "6a00b8a9"
    },
    {
      "cell_type": "code",
      "source": "sns.boxplot(df.Age)",
      "metadata": {},
      "execution_count": 59,
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": "C:\\Users\\ELCOT\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n\n  warnings.warn(\n"
        },
        {
          "execution_count": 59,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<AxesSubplot:xlabel='Age'>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "id": "59757098"
    },
    {
      "cell_type": "code",
      "source": "df.shape",
      "metadata": {},
      "execution_count": 38,
      "outputs": [
        {
          "execution_count": 38,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(200, 5)"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "19894a5f"
    },
    {
      "cell_type": "code",
      "source": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt",
      "metadata": {},
      "execution_count": 39,
      "outputs": [],
      "id": "85590992"
    },
    {
      "cell_type": "code",
      "source": "df=pd.read_csv('Mall_Customers.csv')\ndf.head()",
      "metadata": {},
      "execution_count": 40,
      "outputs": [
        {
          "execution_count": 40,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Male</td>\n",
              "      <td>19</td>\n",
              "      <td>15</td>\n",
              "      <td>39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Male</td>\n",
              "      <td>21</td>\n",
              "      <td>15</td>\n",
              "      <td>81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Female</td>\n",
              "      <td>20</td>\n",
              "      <td>16</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Female</td>\n",
              "      <td>23</td>\n",
              "      <td>16</td>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Female</td>\n",
              "      <td>31</td>\n",
              "      <td>17</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   CustomerID  Gender  Age  Annual Income (k$)  Spending Score (1-100)\n",
              "0           1    Male   19                  15                      39\n",
              "1           2    Male   21                  15                      81\n",
              "2           3  Female   20                  16                       6\n",
              "3           4  Female   23                  16                      77\n",
              "4           5  Female   31                  17                      40"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "09fd22d2"
    },
    {
      "cell_type": "markdown",
      "source": "### Outlier removal using IQR",
      "metadata": {},
      "id": "84b79ae3"
    },
    {
      "cell_type": "code",
      "source": "q1=df.Age.quantile(0.25)\nq3=df.Age.quantile(0.75)",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": [],
      "id": "69467012"
    },
    {
      "cell_type": "code",
      "source": "IQR=q3-q1",
      "metadata": {},
      "execution_count": null,
      "outputs": [],
      "id": "f85492bb"
    },
    {
      "cell_type": "code",
      "source": "upper_limit= q3+1.5*IQR\nlower_limit= q1-1.5*IQR",
      "metadata": {},
      "execution_count": null,
      "outputs": [],
      "id": "75cf518c"
    },
    {
      "cell_type": "code",
      "source": "df=df[df.Age<upper_limit]",
      "metadata": {},
      "execution_count": null,
      "outputs": [],
      "id": "0d64277e"
    },
    {
      "cell_type": "code",
      "source": "sns.boxplot(df.Age)",
      "metadata": {},
      "execution_count": 57,
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": "C:\\Users\\ELCOT\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n\n  warnings.warn(\n"
        },
        {
          "execution_count": 57,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<AxesSubplot:xlabel='Age'>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWAAAAEGCAYAAABbzE8LAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAKTklEQVR4nO3dbYil91nH8d+V3YZuWksbNy5xUzuEkUSNNk1CbYxIjQ+0UooPEVwQiih9I8MWFFHfqfSFb8QwoBiqovhEHxQlBG2oVawvLLs1palJ9FBT27VJNi4m6saWJn9fnHuTdVuyu8mcc5055/OBZWbumd37f+Wc/eY+/2TuqTFGAFi+K7oXALCpBBigiQADNBFggCYCDNDk4OV88eHDh8fW1taClgKwnk6ePPnkGOOaC49fVoC3trZy4sSJvVsVwAaoqs9+teO2IACaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ESAAZoIMEATAQZoIsAATQQYoIkAAzQRYIAmAgzQRIABmggwQBMBBmhyWT8Tjsu3u7ub2WzWvYyLOnXqVJLk6NGjzSvZP7a3t7Ozs9O9DPYxAV6w2WyWBx58KM9edXX3Ul7UgbNPJUke+6KnxKU4cPZM9xJYA/62LcGzV12dZ278ge5lvKhDD9+XJCu/zlVx7p8XvBz2gAGaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ESAAZoIMEATAQZoIsAATQQYoIkAAzQRYIAmAgzQRIABmggwQBMBBmgiwABNBBigiQADNBFggCYCDNBEgAGaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ESAAZoIMEATAQZoIsAATQQYoIkAAzQRYIAmAgzQRIABmiwlwLu7u9nd3V3GqQD21CL7dXAhf+oFZrPZMk4DsOcW2S9bEABNBBigiQADNBFggCYCDNBEgAGaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ESAAZoIMEATAQZoIsAATQQYoIkAAzQRYIAmAgzQRIABmggwQBMBBmgiwABNBBigiQADNBFggCYCDNBEgAGaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ESAAZoIMEATAQZoIsAATQ4u4ySnTp3KM888k+PHjy/jdCtlNpvlii+N7mWwx67436czm/3XRj6nN81sNsuhQ4cW8mdf9Aq4qt5dVSeq6sTp06cXsgiATXTRK+Axxj1J7kmS22677SVdyh09ejRJcvfdd7+U376vHT9+PCc/83j3Mthjz73yNdm+/shGPqc3zSJf5dgDBmgiwABNBBigiQADNBFggCYCDNBEgAGaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ESAAZoIMEATAQZoIsAATQQYoIkAAzQRYIAmAgzQRIABmggwQBMBBmgiwABNBBigiQADNBFggCYCDNBEgAGaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ESAAZoIMEATAQZoIsAATQ4u4yTb29vLOA3Anltkv5YS4J2dnWWcBmDPLbJftiAAmggwQBMBBmgiwABNBBigiQADNBFggCYCDNBEgAGaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ESAAZoIMEATAQZoIsAATQQYoIkAAzQRYIAmAgzQRIABmggwQBMBBmgiwABNBBigiQADNBFggCYCDNBEgAGaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ORg9wI2wYGzZ3Lo4fu6l/GiDpz9jyRZ+XWuigNnzyQ50r0M9jkBXrDt7e3uJVySU6e+nCQ5elRULs2RffPYsroEeMF2dna6lwCsKHvAAE0EGKCJAAM0EWCAJgIM0ESAAZoIMEATAQZoIsAATQQYoIkAAzQRYIAmAgzQRIABmggwQBMBBmgiwABNBBigiQADNBFggCY1xrj0L646neSzi1vO/3M4yZNLOlenTZkz2ZxZN2XOZHNmfblzvmGMcc2FBy8rwMtUVSfGGLd1r2PRNmXOZHNm3ZQ5k82ZdVFz2oIAaCLAAE1WOcD3dC9gSTZlzmRzZt2UOZPNmXUhc67sHjDAulvlK2CAtSbAAE3aA1xVr6+qj1bVQ1X16ao6Ph2/uqrur6p/md6+rnutL1dVvbKqPl5Vn5xm/aXp+NrNmiRVdaCq/rGq7p0+Xtc5H62qT1XVA1V1Yjq2drNW1Wur6oNV9fD09/X2NZ3zhumxPPfr6ap6zyJmbQ9wki8n+ZkxxjcleUuSn66qb07y80k+Msb4xiQfmT7e776Y5M4xxhuT3JzkbVX1lqznrElyPMlD5328rnMmyXePMW4+7/8VXcdZ707yl2OMG5O8MfPHdu3mHGM8Mj2WNye5NcnZJH+WRcw6xlipX0n+PMn3JXkkybXTsWuTPNK9tj2e86okn0jy7es4a5LrpifpnUnunY6t3ZzTLI8mOXzBsbWaNclrkvxrpv9wv65zfpW5vz/J3y9q1lW4An5eVW0leVOSf0hyZIzxhSSZ3n5d49L2zPSy/IEkTyS5f4yxrrP+epKfS/LcecfWcc4kGUk+XFUnq+rd07F1m/X6JKeT/O60rfS+qnpV1m/OC/1Ykj+e3t/zWVcmwFX16iQfSvKeMcbT3etZlDHGs2P+0ua6JG+uqpual7TnquodSZ4YY5zsXsuS3DHGuCXJ2zPfQvuu7gUtwMEktyT5zTHGm5L8T9Zgu+HFVNWVSd6Z5AOLOsdKBLiqXpF5fP9wjPGn0+HHq+ra6fPXZn7FuDbGGP+Z5G+SvC3rN+sdSd5ZVY8m+ZMkd1bVH2T95kySjDH+fXr7ROZ7hW/O+s36+SSfn16xJckHMw/yus15vrcn+cQY4/Hp4z2ftT3AVVVJfjvJQ2OMXzvvU3+R5F3T++/KfG94X6uqa6rqtdP7h5J8b5KHs2azjjF+YYxx3RhjK/OXcH89xvjxrNmcSVJVr6qqrzn3fuZ7hg9mzWYdYzyW5HNVdcN06HuS/FPWbM4LHMsL2w/JAmZt/064qvrOJH+X5FN5Yb/wFzPfB35/km9I8m9JfnSMcaZlkXukqr4tye8lOZD5v/zeP8b45ar62qzZrOdU1VuT/OwY4x3rOGdVXZ/5VW8yf5n+R2OM967prDcneV+SK5N8JslPZHoeZ43mTJKquirJ55JcP8Z4ajq2549pe4ABNlX7FgTAphJggCYCDNBEgAGaCDBAEwFmX6iqH6qqUVU3dq8F9ooAs18cS/KxzL+xA9aCALPypvuE3JHkJzMFuKquqKrfmO6rfG9V3VdVd02fu7Wq/na6Oc5fnfv2UVg1Asx+8IOZ34f2n5Ocqapbkvxwkq0k35rkp5Lcnjx/X5HdJHeNMW5N8jtJ3tuwZriog90LgEtwLPPbWybzm/scS/KKJB8YYzyX5LGq+uj0+RuS3JTk/vltRnIgyReWulq4RALMSpu+//7OJDdV1cg8qCMv3H/hK35Lkk+PMW5f0hLhJbMFwaq7K8nvjzHeMMbYGmO8PvOfzPBkkh+Z9oKPJHnr9PWPJLmmqp7fkqiqb+lYOFyMALPqjuUrr3Y/lOTrM79H7YNJfivzu+c9Ncb4UubR/tWq+mSSB5J8x9JWC5fB3dDYt6rq1WOM/562KT6e+U+meKx7XXCp7AGzn9073eD+yiS/Ir7sN66AAZrYAwZoIsAATQQYoIkAAzQRYIAm/wddbw0HSSm3tAAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "id": "d57a5742"
    },
    {
      "cell_type": "code",
      "source": "df.shape",
      "metadata": {},
      "execution_count": 60,
      "outputs": [
        {
          "execution_count": 60,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(200, 5)"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "2fbb0754"
    },
    {
      "cell_type": "markdown",
      "source": "# Replacement of outliers-median",
      "metadata": {},
      "id": "3efefcba"
    },
    {
      "cell_type": "code",
      "source": "sns.boxplot(df.Age)",
      "metadata": {},
      "execution_count": 61,
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": "C:\\Users\\ELCOT\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n\n  warnings.warn(\n"
        },
        {
          "execution_count": 61,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<AxesSubplot:xlabel='Age'>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "id": "134379ae"
    },
    {
      "cell_type": "code",
      "source": "q1 = df.Age.quantile(0.25)\nq3 = df.Age.quantile(0.75)",
      "metadata": {},
      "execution_count": 66,
      "outputs": [],
      "id": "7aa506be"
    },
    {
      "cell_type": "code",
      "source": "IQR=q3-q1",
      "metadata": {},
      "execution_count": 67,
      "outputs": [],
      "id": "ee9e702b"
    },
    {
      "cell_type": "code",
      "source": "upper_limit= q3+1.5*IQR\nlower_limit= q1-1.5*IQR",
      "metadata": {},
      "execution_count": 68,
      "outputs": [],
      "id": "0e9e2484"
    },
    {
      "cell_type": "code",
      "source": "upper_limit",
      "metadata": {},
      "execution_count": 69,
      "outputs": [
        {
          "execution_count": 69,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "79.375"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "8a96a249"
    },
    {
      "cell_type": "code",
      "source": "df.median()",
      "metadata": {},
      "execution_count": 70,
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": "C:\\Users\\ELCOT\\AppData\\Local\\Temp\\ipykernel_9224\\530051474.py:1: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n\n  df.median()\n"
        },
        {
          "execution_count": 70,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "CustomerID                100.5\n",
              "Age                        36.0\n",
              "Annual Income (k$)         61.5\n",
              "Spending Score (1-100)     50.0\n",
              "dtype: float64"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "b29b2184"
    },
    {
      "cell_type": "code",
      "source": "df['Age'] = np.where(df['Age']>upper_limit,5.0,df['Age'])",
      "metadata": {},
      "execution_count": 71,
      "outputs": [],
      "id": "d03382f0"
    },
    {
      "cell_type": "code",
      "source": "sns.boxplot(df.Age)",
      "metadata": {},
      "execution_count": 72,
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": "C:\\Users\\ELCOT\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n\n  warnings.warn(\n"
        },
        {
          "execution_count": 72,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<AxesSubplot:xlabel='Age'>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "id": "ccffd116"
    },
    {
      "cell_type": "code",
      "source": "df.shape",
      "metadata": {},
      "execution_count": 73,
      "outputs": [
        {
          "execution_count": 73,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(200, 5)"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "71225657"
    },
    {
      "cell_type": "markdown",
      "source": "# Z-score",
      "metadata": {},
      "id": "914ecc21"
    },
    {
      "cell_type": "code",
      "source": "sns.boxplot(df.Age)",
      "metadata": {},
      "execution_count": 74,
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": "C:\\Users\\ELCOT\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n\n  warnings.warn(\n"
        },
        {
          "execution_count": 74,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<AxesSubplot:xlabel='Age'>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "id": "04b1f0ab"
    },
    {
      "cell_type": "code",
      "source": "from scipy import stats",
      "metadata": {},
      "execution_count": 75,
      "outputs": [],
      "id": "6315e372"
    },
    {
      "cell_type": "code",
      "source": "Age_zscore=stats.zscore(df.Age)",
      "metadata": {},
      "execution_count": 76,
      "outputs": [],
      "id": "3165488f"
    },
    {
      "cell_type": "code",
      "source": "Age_zscore",
      "metadata": {},
      "execution_count": 77,
      "outputs": [
        {
          "execution_count": 77,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     -1.424569\n",
              "1     -1.281035\n",
              "2     -1.352802\n",
              "3     -1.137502\n",
              "4     -0.563369\n",
              "         ...   \n",
              "195   -0.276302\n",
              "196    0.441365\n",
              "197   -0.491602\n",
              "198   -0.491602\n",
              "199   -0.635135\n",
              "Name: Age, Length: 200, dtype: float64"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "d764cf65"
    },
    {
      "cell_type": "code",
      "source": "df_z=df[np.abs(Age_zscore)<=3]",
      "metadata": {},
      "execution_count": 78,
      "outputs": [],
      "id": "e1ae0589"
    },
    {
      "cell_type": "code",
      "source": "sns.boxplot(df_z['Age'])",
      "metadata": {},
      "execution_count": 79,
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": "C:\\Users\\ELCOT\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n\n  warnings.warn(\n"
        },
        {
          "execution_count": 79,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<AxesSubplot:xlabel='Age'>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "id": "66c58c63"
    },
    {
      "cell_type": "code",
      "source": "df.shape",
      "metadata": {},
      "execution_count": 80,
      "outputs": [
        {
          "execution_count": 80,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(200, 5)"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "b4d97932"
    },
    {
      "cell_type": "markdown",
      "source": "# Outlier removel with percentile",
      "metadata": {},
      "id": "c01ad0df"
    },
    {
      "cell_type": "code",
      "source": "sns.boxplot(df.Age)",
      "metadata": {},
      "execution_count": 81,
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": "C:\\Users\\ELCOT\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n\n  warnings.warn(\n"
        },
        {
          "execution_count": 81,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<AxesSubplot:xlabel='Age'>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "id": "f9b416a1"
    },
    {
      "cell_type": "code",
      "source": "p99=df.Age.quantile(0.99)\np99",
      "metadata": {},
      "execution_count": 82,
      "outputs": [
        {
          "execution_count": 82,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "69.00999999999999"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "648bd846"
    },
    {
      "cell_type": "code",
      "source": "df.describe()",
      "metadata": {},
      "execution_count": 83,
      "outputs": [
        {
          "execution_count": 83,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>200.000000</td>\n",
              "      <td>200.000000</td>\n",
              "      <td>200.000000</td>\n",
              "      <td>200.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>100.500000</td>\n",
              "      <td>38.850000</td>\n",
              "      <td>60.560000</td>\n",
              "      <td>50.200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>57.879185</td>\n",
              "      <td>13.969007</td>\n",
              "      <td>26.264721</td>\n",
              "      <td>25.823522</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>15.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>50.750000</td>\n",
              "      <td>28.750000</td>\n",
              "      <td>41.500000</td>\n",
              "      <td>34.750000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>100.500000</td>\n",
              "      <td>36.000000</td>\n",
              "      <td>61.500000</td>\n",
              "      <td>50.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>150.250000</td>\n",
              "      <td>49.000000</td>\n",
              "      <td>78.000000</td>\n",
              "      <td>73.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>200.000000</td>\n",
              "      <td>70.000000</td>\n",
              "      <td>137.000000</td>\n",
              "      <td>99.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       CustomerID         Age  Annual Income (k$)  Spending Score (1-100)\n",
              "count  200.000000  200.000000          200.000000              200.000000\n",
              "mean   100.500000   38.850000           60.560000               50.200000\n",
              "std     57.879185   13.969007           26.264721               25.823522\n",
              "min      1.000000   18.000000           15.000000                1.000000\n",
              "25%     50.750000   28.750000           41.500000               34.750000\n",
              "50%    100.500000   36.000000           61.500000               50.000000\n",
              "75%    150.250000   49.000000           78.000000               73.000000\n",
              "max    200.000000   70.000000          137.000000               99.000000"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "6c965622"
    },
    {
      "cell_type": "code",
      "source": "df=df[df.Age<=p99]",
      "metadata": {},
      "execution_count": 84,
      "outputs": [],
      "id": "a21b93fa"
    },
    {
      "cell_type": "code",
      "source": "sns.boxplot(df.Age)",
      "metadata": {},
      "execution_count": 85,
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": "C:\\Users\\ELCOT\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n\n  warnings.warn(\n"
        },
        {
          "execution_count": 85,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<AxesSubplot:xlabel='Age'>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "id": "26ddddb1"
    },
    {
      "cell_type": "code",
      "source": "df.shape",
      "metadata": {},
      "execution_count": 86,
      "outputs": [
        {
          "execution_count": 86,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(198, 5)"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "6d3465c7"
    },
    {
      "cell_type": "markdown",
      "source": "# Check for Categorical columns and perform encoding",
      "metadata": {},
      "id": "60b632fc"
    },
    {
      "cell_type": "code",
      "source": "# categorical columns",
      "metadata": {},
      "execution_count": 87,
      "outputs": [],
      "id": "88b3d012"
    },
    {
      "cell_type": "code",
      "source": "import pandas as pd\nimport numpy as np\nimport random\n\ndf = pd.DataFrame({\n    'x': np.linspace(0, 50, 6),\n    'y': np.linspace(0, 20, 6),\n    'Age': random.sample('abcdef', 6)\n})\ndf['Age'] = pd.Categorical(df['Age'])",
      "metadata": {},
      "execution_count": 89,
      "outputs": [],
      "id": "4ec87fe4"
    },
    {
      "cell_type": "code",
      "source": "df.Age.dtype",
      "metadata": {},
      "execution_count": 90,
      "outputs": [
        {
          "execution_count": 90,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "CategoricalDtype(categories=['a', 'b', 'c', 'd', 'e', 'f'], ordered=False)"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "393a0419"
    },
    {
      "cell_type": "code",
      "source": "df.x.dtype == 'float64'",
      "metadata": {},
      "execution_count": 91,
      "outputs": [
        {
          "execution_count": 91,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "624b5296"
    },
    {
      "cell_type": "markdown",
      "source": "## 1 label encoding",
      "metadata": {},
      "id": "b1ecfa38"
    },
    {
      "cell_type": "code",
      "source": "from sklearn.preprocessing import LabelEncoder",
      "metadata": {},
      "execution_count": 92,
      "outputs": [],
      "id": "af53a24b"
    },
    {
      "cell_type": "code",
      "source": "le=LabelEncoder()",
      "metadata": {},
      "execution_count": 93,
      "outputs": [],
      "id": "9d8314a7"
    },
    {
      "cell_type": "code",
      "source": "df.Age=le.fit_transform(df.Age)\ndf.Annual Income (k$)=le.fit_transform(df.Annual Income (k$))",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": [],
      "id": "4bea228f"
    },
    {
      "cell_type": "code",
      "source": "df.head()",
      "metadata": {},
      "execution_count": 95,
      "outputs": [
        {
          "execution_count": 95,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>x</th>\n",
              "      <th>y</th>\n",
              "      <th>Age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>d</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>10.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>b</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>20.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>a</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>30.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>c</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>40.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>f</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      x     y Age\n",
              "0   0.0   0.0   d\n",
              "1  10.0   4.0   b\n",
              "2  20.0   8.0   a\n",
              "3  30.0  12.0   c\n",
              "4  40.0  16.0   f"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "5c7095eb"
    },
    {
      "cell_type": "markdown",
      "source": "## 2.One hot encoding",
      "metadata": {},
      "id": "ed120f0c"
    },
    {
      "cell_type": "code",
      "source": "df_main=pd.get_dummies(df,columns=['Age'])\ndf_main.head()",
      "metadata": {},
      "execution_count": 96,
      "outputs": [
        {
          "execution_count": 96,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>x</th>\n",
              "      <th>y</th>\n",
              "      <th>Age_a</th>\n",
              "      <th>Age_b</th>\n",
              "      <th>Age_c</th>\n",
              "      <th>Age_d</th>\n",
              "      <th>Age_e</th>\n",
              "      <th>Age_f</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>10.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>20.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>30.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>40.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      x     y  Age_a  Age_b  Age_c  Age_d  Age_e  Age_f\n",
              "0   0.0   0.0      0      0      0      1      0      0\n",
              "1  10.0   4.0      0      1      0      0      0      0\n",
              "2  20.0   8.0      1      0      0      0      0      0\n",
              "3  30.0  12.0      0      0      1      0      0      0\n",
              "4  40.0  16.0      0      0      0      0      0      1"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "c6985fe9"
    },
    {
      "cell_type": "code",
      "source": "df_main.corr()",
      "metadata": {},
      "execution_count": 97,
      "outputs": [
        {
          "execution_count": 97,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>x</th>\n",
              "      <th>y</th>\n",
              "      <th>Age_a</th>\n",
              "      <th>Age_b</th>\n",
              "      <th>Age_c</th>\n",
              "      <th>Age_d</th>\n",
              "      <th>Age_e</th>\n",
              "      <th>Age_f</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>x</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.130931</td>\n",
              "      <td>-0.392792</td>\n",
              "      <td>0.130931</td>\n",
              "      <td>-0.654654</td>\n",
              "      <td>0.654654</td>\n",
              "      <td>0.392792</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>y</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.130931</td>\n",
              "      <td>-0.392792</td>\n",
              "      <td>0.130931</td>\n",
              "      <td>-0.654654</td>\n",
              "      <td>0.654654</td>\n",
              "      <td>0.392792</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age_a</th>\n",
              "      <td>-0.130931</td>\n",
              "      <td>-0.130931</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>-0.200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age_b</th>\n",
              "      <td>-0.392792</td>\n",
              "      <td>-0.392792</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>-0.200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age_c</th>\n",
              "      <td>0.130931</td>\n",
              "      <td>0.130931</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>-0.200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age_d</th>\n",
              "      <td>-0.654654</td>\n",
              "      <td>-0.654654</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>-0.200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age_e</th>\n",
              "      <td>0.654654</td>\n",
              "      <td>0.654654</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age_f</th>\n",
              "      <td>0.392792</td>\n",
              "      <td>0.392792</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>-0.200000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "              x         y     Age_a     Age_b     Age_c     Age_d     Age_e  \\\n",
              "x      1.000000  1.000000 -0.130931 -0.392792  0.130931 -0.654654  0.654654   \n",
              "y      1.000000  1.000000 -0.130931 -0.392792  0.130931 -0.654654  0.654654   \n",
              "Age_a -0.130931 -0.130931  1.000000 -0.200000 -0.200000 -0.200000 -0.200000   \n",
              "Age_b -0.392792 -0.392792 -0.200000  1.000000 -0.200000 -0.200000 -0.200000   \n",
              "Age_c  0.130931  0.130931 -0.200000 -0.200000  1.000000 -0.200000 -0.200000   \n",
              "Age_d -0.654654 -0.654654 -0.200000 -0.200000 -0.200000  1.000000 -0.200000   \n",
              "Age_e  0.654654  0.654654 -0.200000 -0.200000 -0.200000 -0.200000  1.000000   \n",
              "Age_f  0.392792  0.392792 -0.200000 -0.200000 -0.200000 -0.200000 -0.200000   \n",
              "\n",
              "          Age_f  \n",
              "x      0.392792  \n",
              "y      0.392792  \n",
              "Age_a -0.200000  \n",
              "Age_b -0.200000  \n",
              "Age_c -0.200000  \n",
              "Age_d -0.200000  \n",
              "Age_e -0.200000  \n",
              "Age_f  1.000000  "
            ]
          },
          "metadata": {}
        }
      ],
      "id": "1c5a0fbc"
    },
    {
      "cell_type": "markdown",
      "source": "# Split the data into dependent and independent variables",
      "metadata": {},
      "id": "2ae65407"
    },
    {
      "cell_type": "code",
      "source": "# X and Y split",
      "metadata": {},
      "execution_count": 98,
      "outputs": [],
      "id": "f4e3df83"
    },
    {
      "cell_type": "code",
      "source": "# dependent variable\n\nY = df.iloc[:, -1]\nprint(Y)",
      "metadata": {},
      "execution_count": 99,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "0    d\n\n1    b\n\n2    a\n\n3    c\n\n4    f\n\n5    e\n\nName: Age, dtype: category\n\nCategories (6, object): ['a', 'b', 'c', 'd', 'e', 'f']\n"
        }
      ],
      "id": "623c3bd0"
    },
    {
      "cell_type": "code",
      "source": "# independent variable\n\nX = df.iloc[:, :-1]\nprint(X)",
      "metadata": {},
      "execution_count": 100,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "      x     y\n\n0   0.0   0.0\n\n1  10.0   4.0\n\n2  20.0   8.0\n\n3  30.0  12.0\n\n4  40.0  16.0\n\n5  50.0  20.0\n"
        }
      ],
      "id": "0652ba3e"
    },
    {
      "cell_type": "markdown",
      "source": "# Scaling the data",
      "metadata": {},
      "id": "8a6f1b83"
    },
    {
      "cell_type": "code",
      "source": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.preprocessing import scale\nX = pd.DataFrame(X)\nsc= StandardScaler()\n",
      "metadata": {},
      "execution_count": 175,
      "outputs": [],
      "id": "66494d47"
    },
    {
      "cell_type": "code",
      "source": "X_scaled=pd.DataFrame(scale(X),columns=X.columns)\nX_scaled.head()",
      "metadata": {},
      "execution_count": 176,
      "outputs": [
        {
          "execution_count": 176,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-1.593255</td>\n",
              "      <td>-1.593255</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-1.303572</td>\n",
              "      <td>-1.303572</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-1.013890</td>\n",
              "      <td>-1.013890</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.724207</td>\n",
              "      <td>-0.724207</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.434524</td>\n",
              "      <td>-0.434524</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          0         1\n",
              "0 -1.593255 -1.593255\n",
              "1 -1.303572 -1.303572\n",
              "2 -1.013890 -1.013890\n",
              "3 -0.724207 -0.724207\n",
              "4 -0.434524 -0.434524"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "e0fdc29c"
    },
    {
      "cell_type": "markdown",
      "source": "# Split the data into training and testing",
      "metadata": {},
      "id": "7acd73ec"
    },
    {
      "cell_type": "code",
      "source": "#Train Test Split",
      "metadata": {},
      "execution_count": 111,
      "outputs": [],
      "id": "7ec5e22d"
    },
    {
      "cell_type": "code",
      "source": "import numpy as np\nfrom sklearn.model_selection import train_test_split",
      "metadata": {},
      "execution_count": 112,
      "outputs": [],
      "id": "fec5ab50"
    },
    {
      "cell_type": "code",
      "source": "from sklearn.model_selection.train_test_split(*arrays, **options)",
      "metadata": {},
      "execution_count": 113,
      "outputs": [
        {
          "ename": "SyntaxError",
          "evalue": "invalid syntax (744669570.py, line 1)",
          "output_type": "error",
          "traceback": [
            "\u001b[1;36m  Input \u001b[1;32mIn [113]\u001b[1;36m\u001b[0m\n\u001b[1;33m    from sklearn.model_selection.train_test_split(*arrays, **options)\u001b[0m\n\u001b[1;37m                                                 ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ],
      "id": "06810960"
    },
    {
      "cell_type": "code",
      "source": "X = np.arange(1,25).reshape(12,2)\nY = np.array([0,1,1,0,1,0,0,1,1,0,1,0])\nX",
      "metadata": {},
      "execution_count": 114,
      "outputs": [
        {
          "execution_count": 114,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 1,  2],\n",
              "       [ 3,  4],\n",
              "       [ 5,  6],\n",
              "       [ 7,  8],\n",
              "       [ 9, 10],\n",
              "       [11, 12],\n",
              "       [13, 14],\n",
              "       [15, 16],\n",
              "       [17, 18],\n",
              "       [19, 20],\n",
              "       [21, 22],\n",
              "       [23, 24]])"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "ead6b2a0"
    },
    {
      "cell_type": "code",
      "source": "Y",
      "metadata": {},
      "execution_count": 115,
      "outputs": [
        {
          "execution_count": 115,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0])"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "8f9f902c"
    },
    {
      "cell_type": "code",
      "source": "X_train,X_test,Y_train,y_test = train_test_split(X,Y)\nX_train",
      "metadata": {},
      "execution_count": 116,
      "outputs": [
        {
          "execution_count": 116,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 7,  8],\n",
              "       [23, 24],\n",
              "       [19, 20],\n",
              "       [ 3,  4],\n",
              "       [ 9, 10],\n",
              "       [15, 16],\n",
              "       [21, 22],\n",
              "       [11, 12],\n",
              "       [ 5,  6]])"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "276a99dc"
    },
    {
      "cell_type": "code",
      "source": "X_test",
      "metadata": {},
      "execution_count": 117,
      "outputs": [
        {
          "execution_count": 117,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 1,  2],\n",
              "       [13, 14],\n",
              "       [17, 18]])"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "0729a62b"
    },
    {
      "cell_type": "code",
      "source": "Y_train",
      "metadata": {},
      "execution_count": 118,
      "outputs": [
        {
          "execution_count": 118,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 0, 0, 1, 1, 1, 1, 0, 1])"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "7f14faaa"
    },
    {
      "cell_type": "code",
      "source": "y_test",
      "metadata": {},
      "execution_count": 119,
      "outputs": [
        {
          "execution_count": 119,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 0, 1])"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "7e825d88"
    },
    {
      "cell_type": "code",
      "source": "X_train,X_test, Y_train,Y_test =train_test_split(X,Y,test_size=5, random_state=4)",
      "metadata": {},
      "execution_count": 120,
      "outputs": [],
      "id": "702bee2d"
    },
    {
      "cell_type": "code",
      "source": "X_train",
      "metadata": {},
      "execution_count": 121,
      "outputs": [
        {
          "execution_count": 121,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 5,  6],\n",
              "       [23, 24],\n",
              "       [ 1,  2],\n",
              "       [ 3,  4],\n",
              "       [11, 12],\n",
              "       [15, 16],\n",
              "       [21, 22]])"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "12a7e40a"
    },
    {
      "cell_type": "code",
      "source": "X_test",
      "metadata": {},
      "execution_count": 122,
      "outputs": [
        {
          "execution_count": 122,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 7,  8],\n",
              "       [ 9, 10],\n",
              "       [13, 14],\n",
              "       [19, 20],\n",
              "       [17, 18]])"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "5b6d07f7"
    },
    {
      "cell_type": "code",
      "source": "Y_train",
      "metadata": {},
      "execution_count": 123,
      "outputs": [
        {
          "execution_count": 123,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 0, 0, 1, 0, 1, 1])"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "cc1e64c9"
    },
    {
      "cell_type": "code",
      "source": "Y_test",
      "metadata": {},
      "execution_count": 124,
      "outputs": [
        {
          "execution_count": 124,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1, 0, 0, 1])"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "11f95d53"
    },
    {
      "cell_type": "code",
      "source": "X_train,X_test, Y_train,Y_test =train_test_split(X,Y,test_size=0.33, random_state=4,stratify=Y)",
      "metadata": {},
      "execution_count": 125,
      "outputs": [],
      "id": "d9259eae"
    },
    {
      "cell_type": "code",
      "source": "X_train",
      "metadata": {},
      "execution_count": 126,
      "outputs": [
        {
          "execution_count": 126,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[21, 22],\n",
              "       [ 1,  2],\n",
              "       [15, 16],\n",
              "       [13, 14],\n",
              "       [17, 18],\n",
              "       [19, 20],\n",
              "       [23, 24],\n",
              "       [ 3,  4]])"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "b531888d"
    },
    {
      "cell_type": "code",
      "source": "X_test",
      "metadata": {},
      "execution_count": 127,
      "outputs": [
        {
          "execution_count": 127,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[11, 12],\n",
              "       [ 7,  8],\n",
              "       [ 5,  6],\n",
              "       [ 9, 10]])"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "e1bc505b"
    },
    {
      "cell_type": "code",
      "source": "Y_train",
      "metadata": {},
      "execution_count": 128,
      "outputs": [
        {
          "execution_count": 128,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 0, 1, 0, 1, 0, 0, 1])"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "d43e4370"
    },
    {
      "cell_type": "code",
      "source": "Y_test",
      "metadata": {},
      "execution_count": 129,
      "outputs": [
        {
          "execution_count": 129,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 0, 1, 1])"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "3d32006f"
    },
    {
      "cell_type": "code",
      "source": "X_train.shape",
      "metadata": {},
      "execution_count": 130,
      "outputs": [
        {
          "execution_count": 130,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(8, 2)"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "5d5bfb98"
    },
    {
      "cell_type": "code",
      "source": "Y_train.shape",
      "metadata": {},
      "execution_count": 131,
      "outputs": [
        {
          "execution_count": 131,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(8,)"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "cf81ad4a"
    },
    {
      "cell_type": "code",
      "source": "X_test.shape",
      "metadata": {},
      "execution_count": 132,
      "outputs": [
        {
          "execution_count": 132,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(4, 2)"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "368b295e"
    },
    {
      "cell_type": "code",
      "source": "Y_test.shape",
      "metadata": {},
      "execution_count": 133,
      "outputs": [
        {
          "execution_count": 133,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(4,)"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "87bc4ed5"
    },
    {
      "cell_type": "markdown",
      "source": "# Build the Model",
      "metadata": {},
      "id": "5fdae95a"
    },
    {
      "cell_type": "code",
      "source": "from sklearn.linear_model import LinearRegression",
      "metadata": {},
      "execution_count": 134,
      "outputs": [],
      "id": "c89b5475"
    },
    {
      "cell_type": "code",
      "source": "model=LinearRegression() # initialzing the model",
      "metadata": {},
      "execution_count": 135,
      "outputs": [],
      "id": "4aa9915d"
    },
    {
      "cell_type": "code",
      "source": "model.fit(X_train,Y_train) # fitting the model on training data",
      "metadata": {},
      "execution_count": 136,
      "outputs": [
        {
          "execution_count": 136,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "bf2f8602"
    },
    {
      "cell_type": "code",
      "source": "Y_test",
      "metadata": {},
      "execution_count": 137,
      "outputs": [
        {
          "execution_count": 137,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 0, 1, 1])"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "e1815914"
    },
    {
      "cell_type": "code",
      "source": "pred_test= model.predict(X_test)\npred_test",
      "metadata": {},
      "execution_count": 138,
      "outputs": [
        {
          "execution_count": 138,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.5, 0.5, 0.5, 0.5])"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "99eebd7c"
    },
    {
      "cell_type": "code",
      "source": "pred_train = model.predict(X_train)\npred_train",
      "metadata": {},
      "execution_count": 139,
      "outputs": [
        {
          "execution_count": 139,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5])"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "40f0dea7"
    },
    {
      "cell_type": "markdown",
      "source": "# Test the Model",
      "metadata": {},
      "id": "f18b2344"
    },
    {
      "cell_type": "code",
      "source": "pred=model.predict(X_test)",
      "metadata": {},
      "execution_count": 142,
      "outputs": [],
      "id": "0075aaca"
    },
    {
      "cell_type": "code",
      "source": "pred",
      "metadata": {},
      "execution_count": 143,
      "outputs": [
        {
          "execution_count": 143,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.5, 0.5, 0.5, 0.5])"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "f18669c8"
    },
    {
      "cell_type": "code",
      "source": "# predict on random values\n\nX_p= model.predict([[2:2]])\nX_p",
      "metadata": {},
      "execution_count": 189,
      "outputs": [
        {
          "ename": "SyntaxError",
          "evalue": "invalid syntax (2817169215.py, line 3)",
          "output_type": "error",
          "traceback": [
            "\u001b[1;36m  Input \u001b[1;32mIn [189]\u001b[1;36m\u001b[0m\n\u001b[1;33m    X_p= model.predict([[2:2]])\u001b[0m\n\u001b[1;37m                          ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ],
      "id": "42d13d76"
    },
    {
      "cell_type": "code",
      "source": "# Comparing\n\nSal= pd.DataFrame({'Actual_Salary': Y_test,'Predicted_Salary':pred})\nSal",
      "metadata": {},
      "execution_count": 145,
      "outputs": [
        {
          "execution_count": 145,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Actual_Salary</th>\n",
              "      <th>Predicted_Salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>0.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>0.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0.5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Actual_Salary  Predicted_Salary\n",
              "0              0               0.5\n",
              "1              0               0.5\n",
              "2              1               0.5\n",
              "3              1               0.5"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "a3cb25a7"
    },
    {
      "cell_type": "markdown",
      "source": "# Train the Model",
      "metadata": {},
      "id": "6ed22561"
    },
    {
      "cell_type": "code",
      "source": "from sklearn.mode_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(x_scaled,y,test_size=0,3,random_state=0)",
      "metadata": {},
      "execution_count": null,
      "outputs": [],
      "id": "58de1b4e"
    },
    {
      "cell_type": "code",
      "source": "X_train.shape",
      "metadata": {},
      "execution_count": 181,
      "outputs": [
        {
          "execution_count": 181,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(8, 2)"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "74a7175c"
    },
    {
      "cell_type": "code",
      "source": "X_test.shape",
      "metadata": {},
      "execution_count": 183,
      "outputs": [
        {
          "execution_count": 183,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(4, 2)"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "1b4a6d45"
    },
    {
      "cell_type": "code",
      "source": "pred=model.predict(y_train)",
      "metadata": {},
      "execution_count": 179,
      "outputs": [
        {
          "ename": "NameError",
          "evalue": "name 'y_train' is not defined",
          "output_type": "error",
          "traceback": [
            "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "Input \u001b[1;32mIn [179]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[0m pred\u001b[38;5;241m=\u001b[39mmodel\u001b[38;5;241m.\u001b[39mpredict(\u001b[43my_train\u001b[49m)\n",
            "\u001b[1;31mNameError\u001b[0m: name 'y_train' is not defined"
          ]
        }
      ],
      "id": "b55f3d72"
    },
    {
      "cell_type": "code",
      "source": "pred",
      "metadata": {},
      "execution_count": 180,
      "outputs": [
        {
          "execution_count": 180,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.5, 0.5, 0.5, 0.5])"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "f1a6a8ab"
    },
    {
      "cell_type": "code",
      "source": "# predict on random values\n\nY_p= model.predict([[1:1]])\nY_p",
      "metadata": {},
      "execution_count": 148,
      "outputs": [
        {
          "ename": "SyntaxError",
          "evalue": "invalid syntax (1929401404.py, line 3)",
          "output_type": "error",
          "traceback": [
            "\u001b[1;36m  Input \u001b[1;32mIn [148]\u001b[1;36m\u001b[0m\n\u001b[1;33m    Y_p= model.predict([[1:1]])\u001b[0m\n\u001b[1;37m                          ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ],
      "id": "47436827"
    },
    {
      "cell_type": "markdown",
      "source": "# Multi Linear Regression",
      "metadata": {},
      "id": "e04a6546"
    },
    {
      "cell_type": "code",
      "source": "import pandas as pd \nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt",
      "metadata": {},
      "execution_count": 151,
      "outputs": [],
      "id": "3e714265"
    },
    {
      "cell_type": "code",
      "source": "df=pd.read_csv('Mall_Customers.csv')\ndf.head()",
      "metadata": {},
      "execution_count": 154,
      "outputs": [
        {
          "execution_count": 154,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Male</td>\n",
              "      <td>19</td>\n",
              "      <td>15</td>\n",
              "      <td>39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Male</td>\n",
              "      <td>21</td>\n",
              "      <td>15</td>\n",
              "      <td>81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Female</td>\n",
              "      <td>20</td>\n",
              "      <td>16</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Female</td>\n",
              "      <td>23</td>\n",
              "      <td>16</td>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Female</td>\n",
              "      <td>31</td>\n",
              "      <td>17</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   CustomerID  Gender  Age  Annual Income (k$)  Spending Score (1-100)\n",
              "0           1    Male   19                  15                      39\n",
              "1           2    Male   21                  15                      81\n",
              "2           3  Female   20                  16                       6\n",
              "3           4  Female   23                  16                      77\n",
              "4           5  Female   31                  17                      40"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "3aead104"
    },
    {
      "cell_type": "code",
      "source": "df.shape",
      "metadata": {},
      "execution_count": 155,
      "outputs": [
        {
          "execution_count": 155,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(200, 5)"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "18cacf2c"
    },
    {
      "cell_type": "code",
      "source": "df.info()",
      "metadata": {},
      "execution_count": 156,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "<class 'pandas.core.frame.DataFrame'>\n\nRangeIndex: 200 entries, 0 to 199\n\nData columns (total 5 columns):\n\n #   Column                  Non-Null Count  Dtype \n\n---  ------                  --------------  ----- \n\n 0   CustomerID              200 non-null    int64 \n\n 1   Gender                  200 non-null    object\n\n 2   Age                     200 non-null    int64 \n\n 3   Annual Income (k$)      200 non-null    int64 \n\n 4   Spending Score (1-100)  200 non-null    int64 \n\ndtypes: int64(4), object(1)\n\nmemory usage: 7.9+ KB\n"
        }
      ],
      "id": "a376e247"
    },
    {
      "cell_type": "code",
      "source": "df.isnull().any()",
      "metadata": {},
      "execution_count": 157,
      "outputs": [
        {
          "execution_count": 157,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "CustomerID                False\n",
              "Gender                    False\n",
              "Age                       False\n",
              "Annual Income (k$)        False\n",
              "Spending Score (1-100)    False\n",
              "dtype: bool"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "0e2fa88d"
    },
    {
      "cell_type": "code",
      "source": "df.Age.value_counts()",
      "metadata": {},
      "execution_count": 158,
      "outputs": [
        {
          "execution_count": 158,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "32    11\n",
              "35     9\n",
              "19     8\n",
              "31     8\n",
              "30     7\n",
              "49     7\n",
              "40     6\n",
              "38     6\n",
              "47     6\n",
              "27     6\n",
              "36     6\n",
              "23     6\n",
              "34     5\n",
              "20     5\n",
              "29     5\n",
              "50     5\n",
              "48     5\n",
              "21     5\n",
              "24     4\n",
              "18     4\n",
              "28     4\n",
              "67     4\n",
              "59     4\n",
              "54     4\n",
              "43     3\n",
              "60     3\n",
              "45     3\n",
              "39     3\n",
              "33     3\n",
              "37     3\n",
              "22     3\n",
              "25     3\n",
              "46     3\n",
              "68     3\n",
              "52     2\n",
              "44     2\n",
              "66     2\n",
              "57     2\n",
              "26     2\n",
              "53     2\n",
              "42     2\n",
              "63     2\n",
              "70     2\n",
              "51     2\n",
              "58     2\n",
              "65     2\n",
              "41     2\n",
              "55     1\n",
              "69     1\n",
              "64     1\n",
              "56     1\n",
              "Name: Age, dtype: int64"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "e210380e"
    },
    {
      "cell_type": "code",
      "source": "from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()",
      "metadata": {},
      "execution_count": 159,
      "outputs": [],
      "id": "5cb90652"
    },
    {
      "cell_type": "code",
      "source": "df.Age=le.fit_transform(df.Age)",
      "metadata": {},
      "execution_count": 161,
      "outputs": [],
      "id": "aa04dc7e"
    },
    {
      "cell_type": "code",
      "source": "df.head()",
      "metadata": {},
      "execution_count": 162,
      "outputs": [
        {
          "execution_count": 162,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Male</td>\n",
              "      <td>1</td>\n",
              "      <td>15</td>\n",
              "      <td>39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Male</td>\n",
              "      <td>3</td>\n",
              "      <td>15</td>\n",
              "      <td>81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Female</td>\n",
              "      <td>2</td>\n",
              "      <td>16</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Female</td>\n",
              "      <td>5</td>\n",
              "      <td>16</td>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Female</td>\n",
              "      <td>13</td>\n",
              "      <td>17</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   CustomerID  Gender  Age  Annual Income (k$)  Spending Score (1-100)\n",
              "0           1    Male    1                  15                      39\n",
              "1           2    Male    3                  15                      81\n",
              "2           3  Female    2                  16                       6\n",
              "3           4  Female    5                  16                      77\n",
              "4           5  Female   13                  17                      40"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "63677aad"
    },
    {
      "cell_type": "code",
      "source": "df.describe()",
      "metadata": {},
      "execution_count": 163,
      "outputs": [
        {
          "execution_count": 163,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>200.000000</td>\n",
              "      <td>200.000000</td>\n",
              "      <td>200.000000</td>\n",
              "      <td>200.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>100.500000</td>\n",
              "      <td>20.680000</td>\n",
              "      <td>60.560000</td>\n",
              "      <td>50.200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>57.879185</td>\n",
              "      <td>13.636251</td>\n",
              "      <td>26.264721</td>\n",
              "      <td>25.823522</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>15.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>50.750000</td>\n",
              "      <td>10.750000</td>\n",
              "      <td>41.500000</td>\n",
              "      <td>34.750000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>100.500000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>61.500000</td>\n",
              "      <td>50.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>150.250000</td>\n",
              "      <td>31.000000</td>\n",
              "      <td>78.000000</td>\n",
              "      <td>73.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>200.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>137.000000</td>\n",
              "      <td>99.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       CustomerID         Age  Annual Income (k$)  Spending Score (1-100)\n",
              "count  200.000000  200.000000          200.000000              200.000000\n",
              "mean   100.500000   20.680000           60.560000               50.200000\n",
              "std     57.879185   13.636251           26.264721               25.823522\n",
              "min      1.000000    0.000000           15.000000                1.000000\n",
              "25%     50.750000   10.750000           41.500000               34.750000\n",
              "50%    100.500000   18.000000           61.500000               50.000000\n",
              "75%    150.250000   31.000000           78.000000               73.000000\n",
              "max    200.000000   50.000000          137.000000               99.000000"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "42b14c36"
    },
    {
      "cell_type": "code",
      "source": "df.corr()",
      "metadata": {},
      "execution_count": 164,
      "outputs": [
        {
          "execution_count": 164,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>CustomerID</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.021934</td>\n",
              "      <td>0.977548</td>\n",
              "      <td>0.013835</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>-0.021934</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.007663</td>\n",
              "      <td>-0.332289</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <td>0.977548</td>\n",
              "      <td>-0.007663</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.009903</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "      <td>0.013835</td>\n",
              "      <td>-0.332289</td>\n",
              "      <td>0.009903</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                        CustomerID       Age  Annual Income (k$)  \\\n",
              "CustomerID                1.000000 -0.021934            0.977548   \n",
              "Age                      -0.021934  1.000000           -0.007663   \n",
              "Annual Income (k$)        0.977548 -0.007663            1.000000   \n",
              "Spending Score (1-100)    0.013835 -0.332289            0.009903   \n",
              "\n",
              "                        Spending Score (1-100)  \n",
              "CustomerID                            0.013835  \n",
              "Age                                  -0.332289  \n",
              "Annual Income (k$)                    0.009903  \n",
              "Spending Score (1-100)                1.000000  "
            ]
          },
          "metadata": {}
        }
      ],
      "id": "66778ccd"
    },
    {
      "cell_type": "code",
      "source": "sns.heatmap(df.corr(),annot=True)",
      "metadata": {},
      "execution_count": 165,
      "outputs": [
        {
          "execution_count": 165,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<AxesSubplot:>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "id": "d5790124"
    },
    {
      "cell_type": "code",
      "source": "df.corr().Age.sort_values(ascending=False)",
      "metadata": {},
      "execution_count": 167,
      "outputs": [
        {
          "execution_count": 167,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Age                       1.000000\n",
              "Annual Income (k$)       -0.007663\n",
              "CustomerID               -0.021934\n",
              "Spending Score (1-100)   -0.332289\n",
              "Name: Age, dtype: float64"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "e314f2c4"
    },
    {
      "cell_type": "code",
      "source": "df.head()",
      "metadata": {},
      "execution_count": 168,
      "outputs": [
        {
          "execution_count": 168,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Male</td>\n",
              "      <td>1</td>\n",
              "      <td>15</td>\n",
              "      <td>39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Male</td>\n",
              "      <td>3</td>\n",
              "      <td>15</td>\n",
              "      <td>81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Female</td>\n",
              "      <td>2</td>\n",
              "      <td>16</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Female</td>\n",
              "      <td>5</td>\n",
              "      <td>16</td>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Female</td>\n",
              "      <td>13</td>\n",
              "      <td>17</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   CustomerID  Gender  Age  Annual Income (k$)  Spending Score (1-100)\n",
              "0           1    Male    1                  15                      39\n",
              "1           2    Male    3                  15                      81\n",
              "2           3  Female    2                  16                       6\n",
              "3           4  Female    5                  16                      77\n",
              "4           5  Female   13                  17                      40"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "7e3bdf2c"
    },
    {
      "cell_type": "markdown",
      "source": "# Evaluating the model",
      "metadata": {},
      "id": "940a07b5"
    },
    {
      "cell_type": "code",
      "source": "# accuracy score\n\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix,roc_auc_score,roc_curve",
      "metadata": {},
      "execution_count": 169,
      "outputs": [],
      "id": "41f037e0"
    },
    {
      "cell_type": "code",
      "source": "# Confusion matrix\n\npd.crosstab(Y_test,pred_test)",
      "metadata": {},
      "execution_count": 170,
      "outputs": [
        {
          "execution_count": 170,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>col_0</th>\n",
              "      <th>0.5</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row_0</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "col_0  0.5\n",
              "row_0     \n",
              "0        2\n",
              "1        2"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "a1072408"
    },
    {
      "cell_type": "code",
      "source": "from sklearn import metrics",
      "metadata": {},
      "execution_count": 171,
      "outputs": [],
      "id": "8b5e0fd3"
    },
    {
      "cell_type": "code",
      "source": "# Precision \n\n#  TP/(TP+FP)\n\n24/30",
      "metadata": {},
      "execution_count": 172,
      "outputs": [
        {
          "execution_count": 172,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "6e82eb05"
    },
    {
      "cell_type": "code",
      "source": "# Recall\n\n# TP /(TP+FN)\n\n24/32",
      "metadata": {},
      "execution_count": 173,
      "outputs": [
        {
          "execution_count": 173,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.75"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "26651685"
    },
    {
      "cell_type": "code",
      "source": "# F1 score\n\n# 2*precision*Recall / (precision+Recall)\n\n2*0.8*0.75/(0.8+0.75)",
      "metadata": {},
      "execution_count": 174,
      "outputs": [
        {
          "execution_count": 174,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7741935483870969"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "2989413e"
    },
    {
      "cell_type": "markdown",
      "source": "# Measure the performance using Evaluation Metrics",
      "metadata": {},
      "id": "42bce45a"
    },
    {
      "cell_type": "code",
      "source": "def fib(n):\n    if n == 0 or n == 1:\n      return 1\n    return fib(n-1) + fib (n-2)\nprint(list(fib(i) for i in range(5)))",
      "metadata": {},
      "execution_count": 149,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "[1, 1, 2, 3, 5]\n"
        }
      ],
      "id": "c2ead621"
    },
    {
      "cell_type": "code",
      "source": "%time fib(20)",
      "metadata": {},
      "execution_count": 150,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "CPU times: total: 15.6 ms\n\nWall time: 9 ms\n"
        },
        {
          "execution_count": 150,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "10946"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "3db72c9f"
    },
    {
      "cell_type": "markdown",
      "source": "# Perform any of the clustering algorithms",
      "metadata": {},
      "id": "cf812c5f"
    },
    {
      "cell_type": "code",
      "source": "from sklearn import cluster",
      "metadata": {},
      "execution_count": 193,
      "outputs": [],
      "id": "e8262e01"
    },
    {
      "cell_type": "code",
      "source": "km_model=cluster.KMeans(n_clusters=3,init='k-means++',random_state=0)",
      "metadata": {},
      "execution_count": 197,
      "outputs": [],
      "id": "d842fe79"
    },
    {
      "cell_type": "code",
      "source": "df = pd.read_csv('Mall_Customers.csv')\ndf.head()",
      "metadata": {},
      "execution_count": 200,
      "outputs": [
        {
          "execution_count": 200,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Male</td>\n",
              "      <td>19</td>\n",
              "      <td>15</td>\n",
              "      <td>39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Male</td>\n",
              "      <td>21</td>\n",
              "      <td>15</td>\n",
              "      <td>81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Female</td>\n",
              "      <td>20</td>\n",
              "      <td>16</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Female</td>\n",
              "      <td>23</td>\n",
              "      <td>16</td>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Female</td>\n",
              "      <td>31</td>\n",
              "      <td>17</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   CustomerID  Gender  Age  Annual Income (k$)  Spending Score (1-100)\n",
              "0           1    Male   19                  15                      39\n",
              "1           2    Male   21                  15                      81\n",
              "2           3  Female   20                  16                       6\n",
              "3           4  Female   23                  16                      77\n",
              "4           5  Female   31                  17                      40"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "d64e1c84"
    },
    {
      "cell_type": "code",
      "source": "new_df =df.iloc[:,:-1]\nnew_df.head()",
      "metadata": {},
      "execution_count": 202,
      "outputs": [
        {
          "execution_count": 202,
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Male</td>\n",
              "      <td>19</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Male</td>\n",
              "      <td>21</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Female</td>\n",
              "      <td>20</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Female</td>\n",
              "      <td>23</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Female</td>\n",
              "      <td>31</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   CustomerID  Gender  Age  Annual Income (k$)\n",
              "0           1    Male   19                  15\n",
              "1           2    Male   21                  15\n",
              "2           3  Female   20                  16\n",
              "3           4  Female   23                  16\n",
              "4           5  Female   31                  17"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "a78eafa5"
    },
    {
      "cell_type": "code",
      "source": "new_df.shape",
      "metadata": {},
      "execution_count": 203,
      "outputs": [
        {
          "execution_count": 203,
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(200, 4)"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "613bbe21"
    },
    {
      "cell_type": "code",
      "source": "from sklearn import cluster",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": [],
      "id": "ab218258"
    },
    {
      "cell_type": "code",
      "source": "error =[]\nfor i in range(1,11):\n    kmeans=cluster.KMeans(n_clusters=i,init='k-means++',random_state=0)\n    kmeans.fit(new_df)\n    error.append(kmeans.inertia_)",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": [],
      "id": "737dada9"
    },
    {
      "cell_type": "code",
      "source": "error",
      "metadata": {
        "trusted": true
      },
      "execution_count": 275,
      "outputs": [
        {
          "execution_count": 275,
          "output_type": "execute_result",
          "data": {
            "text/plain": "[2030.0, 464.0, 174.0, 116.0, 58.0, 0.0]"
          },
          "metadata": {}
        }
      ],
      "id": "48429b19"
    },
    {
      "cell_type": "code",
      "source": "import matplotlib.pyplot as plt\nplt.plot(range(1,11),Age)\nplt.title('Elbow method')\nplt.xlabel('no of clusters')\nplt.ylabel('Age')\nplt.show()",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": [],
      "id": "092654c7"
    },
    {
      "cell_type": "code",
      "source": "km_model=cluster.KMeans(n_clusters=3,init='k-means++',random_state=0)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 279,
      "outputs": [],
      "id": "a6a44dc6"
    },
    {
      "cell_type": "code",
      "source": "km_model.fit(new_df)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 280,
      "outputs": [
        {
          "execution_count": 280,
          "output_type": "execute_result",
          "data": {
            "text/plain": "KMeans(n_clusters=3, random_state=0)",
            "text/html": "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=3, random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=3, random_state=0)</pre></div></div></div></div></div>"
          },
          "metadata": {}
        }
      ],
      "id": "5769d03c"
    },
    {
      "cell_type": "code",
      "source": "km_model.predict(new_df)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 282,
      "outputs": [
        {
          "execution_count": 282,
          "output_type": "execute_result",
          "data": {
            "text/plain": "array([0, 0, 2, 2, 1, 1])"
          },
          "metadata": {}
        }
      ],
      "id": "b768c96f"
    },
    {
      "cell_type": "code",
      "source": "km_model.predict([[5.1,3.5,1.4,0.2]])",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": [],
      "id": "f6eecc26"
    },
    {
      "cell_type": "markdown",
      "source": "##  Add the cluster data with primary dataset",
      "metadata": {},
      "id": "8bf29cad-126e-4509-bc06-2a3764f725a9"
    },
    {
      "cell_type": "code",
      "source": "ykmeans =km_model.predict(new_df)\nykmeans",
      "metadata": {
        "trusted": true
      },
      "execution_count": 288,
      "outputs": [
        {
          "execution_count": 288,
          "output_type": "execute_result",
          "data": {
            "text/plain": "array([0, 0, 2, 2, 1, 1])"
          },
          "metadata": {}
        }
      ],
      "id": "7905bb1c-726c-454f-807a-d2e38c785e41"
    },
    {
      "cell_type": "code",
      "source": "new_df['kclus'] =pd.Series(ykmeans)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 289,
      "outputs": [],
      "id": "1ab40562-36e0-42ff-adda-dc5b13812932"
    },
    {
      "cell_type": "code",
      "source": "new_df.head()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 290,
      "outputs": [
        {
          "execution_count": 290,
          "output_type": "execute_result",
          "data": {
            "text/plain": "      x     y  kclus\n0   0.0   0.0      0\n1  10.0   4.0      0\n2  20.0   8.0      2\n3  30.0  12.0      2\n4  40.0  16.0      1",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>x</th>\n      <th>y</th>\n      <th>kclus</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10.0</td>\n      <td>4.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>20.0</td>\n      <td>8.0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>30.0</td>\n      <td>12.0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>40.0</td>\n      <td>16.0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "id": "17478219-e99a-45f0-85fe-32ce9c955ffc"
    },
    {
      "cell_type": "code",
      "source": "",
      "metadata": {},
      "execution_count": null,
      "outputs": [],
      "id": "9bb2e14b-bd60-461d-83c8-4a552dd6a346"
    }
  ]
}